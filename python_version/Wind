# -*- coding: UTF-8 -*-

import json
import math

class Windy:
    '所有风层的三维风向数据'

    datas = {}
    builder = []
    grid = []
    data = {}
    lo1 = la1 = dx = dy = nx = ny = 0

    def __init__(self,DATA):
        for i in DATA.keys():
            with open(DATA[i], 'r') as d:
                self.datas[i] = json.load(d)

        self.__buildGrid(self.datas['2019050706.json'])
        wind = self.__interpolate(112, 39)

        print wind

    def __createBuilder(self,data):
        uComp = vComp = scalar = {}
        for record in data:
            parCategory = str(record['header']['parameterCategory'])
            parNumber = str(record['header']['parameterNumber'])
            case = parCategory + ',' + parNumber
            if(case == '1,2' or case == '2,2'):
                uComp = record
            elif(case == '1,3' or case == '2,3'):
                vComp = record
            else:
                scalar = record
        return self.__createWindBuilder(uComp, vComp)

    def __createWindBuilder(self, uComp, vComp):

        uData = uComp['data']
        vData = vComp['data']
        data = []

        for i in range(max(len(uData), len(vData))):
            data.insert(i, [uData[i], vData[i]])
        return {
            'header': uComp['header'],
            'data': data,
            'interpolate': self.__bilinearInterpolateVector
        }

    def __bilinearInterpolateVector(self, x, y, g00, g10, g01, g11):
        rx = 1 - x; ry = 1 - y
        a = rx * ry; b = x * ry; c = rx * y; d = x * y
        u = g00[0] * a + g10[0] * b + g01[0] * c +g11[0] *d
        v = g00[1] * a + g10[1] * b + g01[1] * c +g11[1] *d
        m = math.sqrt(u * u + v * v)
        return [u, v, m]

    def __buildGrid(self,data):
        builder = self.__createBuilder(data)
        header = builder['header']
        self.lo1 = header['lo1']
        self.la1 = header['la1']
        self.dx = header['dx']
        self.dy = header['dy']
        self.nx = header['nx']
        self.ny = header['ny']

        self.grid = []
        p = 0
        isContinuous = math.floor(self.nx * self.dx) >= 360
        for j in range(self.ny):
            row = []
            for i in range(self.nx):
                row.insert(i, builder['data'][p])
                p +=1
            if(isContinuous):
                row.append(row[0])
            self.grid.insert(j, row)

    def __interpolateField(self):
        projection = {}
        columns = []
        pass

    def __interpolate(self, lng, lat):
        if(self.grid == []):
            return
        dlng = lng - self.lo1
        i = dlng - math.floor(dlng / 360) * 360
        j = (self.la1 - lat) / self.dy
        fi = int(math.floor(i)); ci = fi + 1
        fj = int(math.floor(j)); cj = fj + 1

        row = []
        if(self.grid[fj]):
            row = self.grid[fj]
            g00 = row[fi]; g10 = row[ci]
            if(g00 and g10 and self.grid[cj]):
                row = self.grid[cj]
                g01 = row[fi]
                g11 = row[ci]
                if(g01 and g11):
                    return self.__bilinearInterpolateVector(
                        i - fi,
                        j - fj,
                        g00, g10, g01, g11
                    )
        return








    def printData(self):
        print self.datas['2019050706.json'][0]['header']














data_path = '../JSON/'
data_name = {'250mb': '2019050706.json', '10m': '2019050706_10m.json'}
DATA = {
    data_name['250mb']: data_path + data_name['250mb'],
    data_name['10m']: data_path + data_name['10m']
}

wind = Windy(DATA)
# wind.printData()